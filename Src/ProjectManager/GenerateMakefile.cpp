#include "GenerateMakefile.h"

#include <QTextStream>

namespace Makefile {

Generator::Generator()
{
    build.name = "Build";
    build.var = "MAIN_BUILD_DIR";
    target.var = "TARGET";

}

void Generator::setBuildDir(QString build)
{
    this->build.name = build;
}

void Generator::setRootDir(QString root)
{
    this->root = root;
}

void Generator::setTargetName(QString target)
{
    this->target.name = target;
}

ToolIndex Generator::addTool(Tool tool)
{
    this->tools.push_back(tool);
    return (int)tools.size() - 1;
}

RuleIndex Generator::addRule(Rule rule)
{
    this->rules.push_back(rule);
    return (int)rules.size() - 1;
}

VariableIndex Generator::addVariable(Variable var)
{
    vars.push_back(var);
    return (int)vars.size() - 1;
}

void Generator::addIfeq(QString ifElse, QString acIf, QString acElse)
{
    ifeq += "ifeq (" + ifElse + ")\n";
    ifeq += "\t" + acIf + "\n";
    if (!acElse.isEmpty()) {
        ifeq += "else\n";
        ifeq += "\t" + acElse + "\n";
    }
    ifeq += "endif\n";

}

void Generator::addPHONY(Rule *rules)
{
    PHONY += rules->getName() + " ";
}

QString Generator::wildcard(QString pattern)
{
    return "$(wildcard " + pattern + ")";
}

QString Generator::addprefix(QString prefix, QString names)
{
    return "$(addprefix " + prefix + ", " + names + ")";
}

QString Generator::subst(QString from, QString to, QString text)
{
    return "$(subst " + from + ", " + to + ", " + text + ")";
}

QString Generator::echo(QString text)
{
    return "@echo -en '" + text + "\\n'";
}

Error Generator::generate()
{
    if (root.lastIndexOf("/") != root.size() - 1) {
        root += "/";
    }
    QFile file(root + "Makefile");
    file.open(QIODevice::WriteOnly);
    QTextStream stream(&file);

//    content.addContent("#Generated by BitCoder").newLine()
//            .addContent("BUILD_DIR = ").addContent(build.c_str()).newLine().newLine();
    stream << "#Generated by BitCoder\n";
    stream << target.var + " = " + target.name + "\n";
    stream << "\n";
    stream << "#Build bir\n";
    stream << build.var + " = " + build.name + "\n";
    stream << "\n";

    stream << "\n";
    stream << "#Vars\n";
    for (auto it = vars.begin(); it != vars.end(); it++) {
        for (auto val_it = it->getVal().begin(); val_it != it->getVal().end(); val_it++) {
            if (it->getTypeVar() == TypeVariable::Assignment) {
                stream << it->getName() + " := " + *val_it + "\n";
            }
            if (it->getTypeVar() == TypeVariable::None) {
                if (val_it == it->getVal().begin()) {
                    stream << it->getName() + " = " + *val_it + "\n";
                }
                else {
                    stream << it->getName() + " += " + *val_it + "\n";
                }
            }
        }
    }
    stream << "\n";
    stream << "#Tools\n";
    for (auto &it : tools) {
        stream << it.getName() + " = " + it.getPath() + "\n";
    }
    stream << "\n";
    stream << ifeq;
    stream << "\n";
    stream << "#Rules\n";

    stream << ".PHONY: " + PHONY + "\n\n";

    for (auto &it : rules) {
        stream << it.getName() + ": " + it.getDep() + "\n";
        stream << it.getActions() + "\n";
        stream << "\n";
    }
    stream << "\n";


//    QFile file(root + "Makefile");
//    if(root.isEmpty()){
//        return RootEmpty;
//    }

//    if (root.lastIndexOf('/') != root.size() - 1) {
//        root += "/";
//    }

//    file.open(QIODevice::WriteOnly);

//    file.write(QByteArray(content.toUtf8()));

//    file.flush();
//    file.close();
    return NoError;
}

QString Generator::getBuildDir()
{
    return "$(" + build.var + ")";
}

QString Generator::getNameBuildDir()
{
    return build.name;
}

QString &Generator::getRootDir()
{
    return root;
}

QString Generator::getTargetName()
{
    return "$(" + target.var + ")";
}

Variable *Generator::getVariable(VariableIndex index)
{
    if (index < 0 || index >= (int)vars.size()) {
        return NULL;
    }
    return &vars.at(index);
}

Rule *Generator::getRule(RuleIndex index)
{
    if (index < 0 || index >= (int)rules.size()) {
        return NULL;
    }
    return &rules.at(index);
}

Tool *Generator::getTool(ToolIndex index)
{
    if (index < 0 || index >= (int)tools.size()) {
        return NULL;
    }
    return &tools.at(index);
}

/* Tool */

Tool::Tool(QString name, QString path)
{
    this->name = name;
    this->path = path;
}

void Tool::setName(QString name)
{
    this->name = name;
}

void Tool::setPath(QString path)
{
    this->path = path;
}

QString Tool::var()
{
    return "$(" + this->name + ")";
}

QString &Tool::getName()
{
    return this->name;
}

QString &Tool::getPath()
{
    return this->path;
}

/* Rule */

Rule::Rule(QString name, QString dep, QString action)
{
    this->name = name;
    this->dep = dep;
    this->actions = "\t" + action + "\n";
}

void Rule::addAction(QString action)
{
    this->actions += "\t" + action + "\n";
}

void Rule::addDep(QString dep)
{
    this->dep += dep + " ";
}

void Rule::setName(QString name)
{
    this->name = name;
}

QString &Rule::getName(void)
{
    return this->name;
}

QString &Rule::getDep(void)
{
    return this->dep;
}

QString &Rule::getActions(void)
{
    return this->actions;
}

Variable::Variable(QString nameVar, QString val)
{
    this->nameVar = nameVar;
    if (!val.isEmpty()) {
        this->val.push_back(val);
    }
    typeVar = None;
}

void Variable::addVal(QString val)
{
    this->val.push_back(val);
}

void Variable::setName(QString nameVar)
{
    this->nameVar = nameVar;
}

void Variable::setTypeVar(TypeVariable type)
{
    typeVar = type;
}

QString &Variable::getName()
{
    return nameVar;
}

QString Variable::var()
{
    return "$(" + nameVar + ")";
}

QVector<QString> &Variable::getVal()
{
    return val;
}

TypeVariable Variable::getTypeVar()
{
    return typeVar;
}

}
